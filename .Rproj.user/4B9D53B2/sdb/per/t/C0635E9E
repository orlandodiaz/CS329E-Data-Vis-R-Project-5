{
    "collab_server" : "",
    "contents" : "# server.R\nrequire(ggplot2)\nrequire(dplyr)\nrequire(shiny)\nrequire(shinydashboard)\nrequire(data.world)\nrequire(readr)\nrequire(DT)\nrequire(leaflet)\n# \n# # The following query is for the select list in the Barcharts -> Barchart with Table Calculation tab.\n# regions = query(\n#   data.world(propsfile = \"www/.data.world\"),\n#   dataset=\"jlee/s-17-dv-project-5\", type=\"sql\",\n#   query=\"select distinct Region as D, Region as R\n#   from globalshipments\n#   order by 1\"\n# ) # %>% View()\n# if(regions[1] == \"Server error\") {\n#   print(\"Getting Regions from csv\")\n#   file_path = \"www/globalshipments.csv\"\n#   df <- readr::read_csv(file_path) \n#   tdf1 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(D = Region)\n#   tdf2 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(R = Region)\n#   regions = bind_cols(tdf1, tdf2)\n# }\n# region_list <- as.list(regions$D, regions$R)\n# region_list <- append(list(\"All\" = \"All\"), region_list)\n# \n# #The following query is for the select list in the Barcharts -> High Discount Orders tab.\n# discounts = query(\n#   data.world(propsfile = \"www/.data.world\"),\n#   dataset=\"jlee/s-17-dv-project-5\", type=\"sql\",\n#   query=\"SELECT `Customer Name` as CustomerName, s.City as City, states.abbreviation as State,\n#   c.LATITUDE AS Latitude,\n#   c.LONGITUDE AS Longitude,\n#   `Order ID` as OrderId, sum(Discount) as sumDiscount, sum(Sales)as sumSales\n#   FROM globalshipments s join markmarkoh.`us-state-table`.`state_table.csv/state_table` states\n#   ON (s.State = states.name AND s.City = c.NAME) join\n#   dhs.`cities-and-towns-ntad`.`Cities_and_Towns_NTAD.csv/Cities_and_Towns_NTAD` c\n#   ON (states.abbreviation = c.STATE)\n#   WHERE Region != 'International'\n#   group by `Customer Name`, s.City, states.abbreviation, c.LATITUDE, c.LONGITUDE, `Order ID`\n#   having sum(Discount) between .3 and .6\"\n# )  # %>% View()\n# \n# # The following query is for the select list in the Barcharts -> High Sales Customers tab.\n# sales = query(\n#   data.world(propsfile = \"www/.data.world\"),\n#   dataset=\"jlee/s-17-dv-project-5\", type=\"sql\",\n#   query=\"SELECT `Sub-Category` as SubCategory, sum(Profit) as sumProfit, sum(Sales) as SumSales\n#   from globalshipments\n#   group by `Sub-Category`\n#   having sum(Sales) > 950000\"\n# ) # %>% View()\n\nshinyServer(function(input, output) { \n  # These widgets are for the Crosstabs tab.\n  online1 = reactive({input$rb1})\n  KPI_Low = reactive({input$KPI1})     \n  KPI_Medium = reactive({input$KPI2})\n  # \n  # # These widgets are for the Barcharts tab.\n  # online2 = reactive({input$rb2})\n  # output$regions2 <- renderUI({selectInput(\"selectedRegions\", \"Choose Regions:\", region_list, multiple = TRUE, selected='All') })\n  \n# Begin Crosstab Tab ------------------------------------------------------------------\n  df1 <- eventReactive(input$click1, {\n      if(online1() == \"SQL\") {\n        print(\"Getting from data.world\")\n        query(\n            data.world(propsfile = \"www/.data.world\"),\n            dataset=\"jlee/s-17-dv-project-5\", type=\"sql\",\n            query=\"select `Sub-Category`, Country, \n            sum(Profit) as sum_profit, \n            sum(Sales) as sum_sales, \n            sum(Profit) / sum(Sales) as ratio,\n            \n            case\n            when sum(Profit) / sum(Sales) < ? then '03 Low'\n            when sum(Profit) / sum(Sales) < ? then '02 Medium'\n            else '01 High'\n            end AS kpi\n            \n            from globalshipments\n            where `Sub-Category` in ('Bookcases', 'Chairs', 'Copiers', 'Phones', 'Storage')\n            group by `Sub-Category`, Country\n            order by `Sub-Category`, Country\",\n            queryParameters = list(KPI_Low(), KPI_Medium())\n          ) # %>% View()\n      }\n      else {\n        print(\"Getting from csv\")\n        file_path = \"www/globalshipments.csv\"\n        df <- readr::read_csv(file_path)\n        df <- dplyr::arrange(df, Country)\n        df %>% dplyr::filter(row_number() <= 10000) %>%\n         # dplyr::filter( `Sub-Category` %in% \n         #                 c('Accesories','Appliances','Art', 'Phones')) %>%\n          dplyr::group_by(`Sub-Category`, Country) %>% \n          dplyr::summarize(sum_profit = sum(Profit), sum_sales = sum(Sales),\n                           ratio = sum(Profit) / sum(Sales),\n                           kpi = if_else(ratio <= KPI_Low(), '03 Low',\n                           if_else(ratio <= KPI_Medium(), '02 Medium', '01 High'))) # %>% View()\n      }\n  })\n  output$data1 <- renderDataTable({DT::datatable(df1(), rownames = FALSE,\n                                extensions = list(Responsive = TRUE, FixedHeader = TRUE)\n  )\n  })\n  output$plot1 <- renderPlot({ggplot(df1()) + \n    theme(axis.text.x=element_text(angle=90, size=16, vjust=0.5)) + \n    theme(axis.text.y=element_text(size=5, hjust=0.5)) +\n    geom_text(aes(x=`Sub-Category`, y=Country, label=sum_sales), size=3) +\n    geom_tile(aes(x=`Sub-Category`, y=Country, fill=kpi), alpha=0.50)\n  })\n# End Crosstab Tab ___________________________________________________________\n# Begin Barchart Tab ------------------------------------------------------------------\n  # df2 <- eventReactive(input$click2, {\n  #   if(input$selectedRegions == 'All') region_list <- input$selectedRegions\n  #   else region_list <- append(list(\"Skip\" = \"Skip\"), input$selectedRegions)\n  #   if(online2() == \"SQL\") {\n  #     print(\"Getting from data.world\")\n  #     tdf = query(\n  #       data.world(propsfile = \"www/.data.world\"),\n  #       dataset=\"jlee/s-17-dv-project-5\", type=\"sql\",\n  #       query=\"select `Sub-Category`, Region, sum(Sales) sum_sales\n  #               from globalshipments\n  #       where ? = 'All' or Region in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n  #       group by `Sub-Category`, Region\",\n  #       queryParameters = region_list\n  #     ) # %>% View()\n  #   }\n  #   else {\n  #     print(\"Getting from csv\")\n  #     file_path = \"www/globalshipments.csv\"\n  #     df <- readr::read_csv(file_path)\n  #     tdf = df %>% dplyr::filter(Region %in% input$selectedRegions | input$selectedRegions == \"All\") %>%\n  #       dplyr::group_by(`Sub-Category`, Region) %>% \n  #       dplyr::summarize(sum_sales = sum(Sales)) # %>% View()\n  #   }\n  #   # The following two lines mimic what can be done with Analytic SQL. Analytic SQL does not currently work in data.world.\n  #   tdf2 = tdf %>% group_by(`Sub-Category`) %>% summarize(window_avg_sales = mean(sum_sales))\n  #   dplyr::inner_join(tdf, tdf2, by = \"Sub-Category\")\n  #   # Analytic SQL would look something like this:\n  #     # select Category, Region, sum_sales, avg(sum_sales) \n  #     # OVER (PARTITION BY Category ) as window_avg_sales\n  #     # from (select Category, Region, sum(Sales) sum_sales\n  #     #       from SuperStoreOrders\n  #     #      group by Category, Region)\n  # })\n  # output$barchartData1 <- renderDataTable({DT::datatable(df2(),\n  #                       rownames = FALSE,\n  #                       extensions = list(Responsive = TRUE, FixedHeader = TRUE) )\n  # })\n  # output$barchartData2 <- renderDataTable({DT::datatable(discounts,\n  #                       rownames = FALSE,\n  #                       extensions = list(Responsive = TRUE, FixedHeader = TRUE) )\n  # })\n  # output$barchartData3 <- renderDataTable({DT::datatable(sales,\n  #                       rownames = FALSE,\n  #                       extensions = list(Responsive = TRUE, FixedHeader = TRUE) )\n  # })\n  # output$barchartPlot1 <- renderPlot({ggplot(df2(), aes(x=Region, y=sum_sales)) +\n  #     scale_y_continuous(labels = scales::comma) + # no scientific notation\n  #     theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + \n  #     theme(axis.text.y=element_text(size=12, hjust=0.5)) +\n  #     geom_bar(stat = \"identity\") + \n  #     facet_wrap(~Category, ncol=1) + \n  #     coord_flip() + \n  #     # Add sum_sales, and (sum_sales - window_avg_sales) label.\n  #     geom_text(mapping=aes(x=Region, y=sum_sales, label=round(sum_sales)),colour=\"black\", hjust=-.5) +\n  #     geom_text(mapping=aes(x=Region, y=sum_sales, label=round(sum_sales - window_avg_sales)),colour=\"blue\", hjust=-2) +\n  #     # Add reference line with a label.\n  #     geom_hline(aes(yintercept = round(window_avg_sales)), color=\"red\") +\n  #     geom_text(aes( -1, window_avg_sales, label = window_avg_sales, vjust = -.5, hjust = -.25), color=\"red\")\n  # })\n  # \n  # output$barchartMap1 <- renderLeaflet({leaflet(width = 400, height = 800) %>% \n  #   setView(lng = -98.35, lat = 39.5, zoom = 4) %>% \n  #   addTiles() %>% \n  #   addProviderTiles(\"MapQuestOpen.Aerial\") %>%\n  #   addMarkers(lng = discounts$Longitude,\n  #     lat = discounts$Latitude,\n  #     options = markerOptions(draggable = TRUE, riseOnHover = TRUE),\n  #     popup = as.character(paste(discounts$CustomerName,\n  #         \", \", discounts$City,\n  #         \", \", discounts$State,\n  #         \" Sales: \",\"$\", formatC(as.numeric(discounts$sumSales), format=\"f\", digits=2, big.mark=\",\"),\n  #         \" Discount: \", \", \", discounts$sumDiscount)) )\n  # })\n  # \n  # output$barchartPlot2 <- renderPlot({ggplot(sales, aes(x=SubCategory, y=SumSales)) +\n  #     theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + \n  #     theme(axis.text.y=element_text(size=12, hjust=0.5)) +\n  #     geom_bar(stat = \"identity\")\n  # })\n  # End Barchart Tab ___________________________________________________________\n  \n})\n",
    "created" : 1492481249076.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4227166159",
    "id" : "C0635E9E",
    "lastKnownWriteTime" : 1492466114,
    "last_content_update" : 1492466114,
    "path" : "~/Desktop/eDV Project 5/02 Shiny/Crosstab3/server.R",
    "project_path" : "02 Shiny/Crosstab3/server.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}