{
    "collab_server" : "",
    "contents" : "# server.R\nrequire(ggplot2)\nrequire(dplyr)\nrequire(shiny)\nrequire(shinydashboard)\nrequire(data.world)\nrequire(readr)\nrequire(DT)\n\n# The following query is for the select list in the Barcharts tab.\nregions = query(\n  data.world(propsfile = \"www/.data.world\"),\n  dataset=\"cannata/superstoreorders\", type=\"sql\",\n  query=\"select distinct Region as D, Region as R\n  from SuperStoreOrders\n  order by 1\"\n) # %>% View()\nif(regions[1] == \"Server error\") {\n  print(\"Getting Regions from csv\")\n  file_path = \"www/SuperStoreOrders.csv\"\n  df <- readr::read_csv(file_path) \n  tdf1 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(D = Region)\n  tdf2 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(R = Region)\n  regions = bind_cols(tdf1, tdf2)\n}\nregion_list <- as.list(regions$D, regions$R)\nregion_list <- append(list(\"All\" = \"All\"), region_list)\n\nshinyServer(function(input, output) { \n  # These widgets are for the Crosstabs tab.\n  online1 = reactive({input$rb1})\n  KPI_Low = reactive({input$KPI1})     \n  KPI_Medium = reactive({input$KPI2})\n  \n  # These widgets are for the Barcharts tab.\n  online2 = reactive({input$rb2})\n  output$regions2 <- renderUI({selectInput(\"selectedRegions\", \"Choose Regions:\", region_list, multiple = TRUE) })\n  \n# Begin Crosstab Tab ------------------------------------------------------------------\n  df1 <- eventReactive(input$click1, {\n      if(online1() == \"SQL\") {\n        print(\"Getting from data.world\")\n        query(\n            data.world(propsfile = \"www/.data.world\"),\n            dataset=\"cannata/superstoreorders\", type=\"sql\",\n            query=\"select Category, State, \n            sum(Profit) as sum_profit, \n            sum(Sales) as sum_sales, \n            sum(Profit) / sum(Sales) as ratio,\n            \n            case\n            when sum(Profit) / sum(Sales) < ? then '03 Low'\n            when sum(Profit) / sum(Sales) < ? then '02 Medium'\n            else '01 High'\n            end AS kpi\n            \n            from SuperStoreOrders\n            where Country_Region = 'United States of America' and\n            Category in ('Chairs  and  Chairmats', 'Office Machines', 'Tables', 'Telephones and Communication')\n            group by Category, State\n            order by Category, State\",\n            queryParameters = list(KPI_Low(), KPI_Medium())\n          ) # %>% View()\n      }\n      else {\n        print(\"Getting from csv\")\n        file_path = \"www/SuperStoreOrders.csv\"\n        df <- readr::read_csv(file_path)\n        df %>% \n          dplyr::filter(Country_Region == 'United States of America', Category %in% \n                          c('Chairs  and  Chairmats',\n                            'Office Machines',\n                            'Tables',\n                            'Telephones and Communication')) %>%\n          dplyr::group_by(Category, State) %>% \n          dplyr::summarize(sum_profit = sum(Profit), sum_sales = sum(Sales),\n                           ratio = sum(Profit) / sum(Sales),\n                           kpi = if_else(ratio <= KPI_Low(), '03 Low',\n                           if_else(ratio <= KPI_Medium(), '02 Medium', '01 High'))) # %>% View()\n      }\n  })\n  output$data1 <- renderDataTable({DT::datatable(df1(), rownames = FALSE,\n                                extensions = list(Responsive = TRUE, FixedHeader = TRUE)\n  )\n  })\n  output$plot1 <- renderPlot({ggplot(df1()) + \n    theme(axis.text.x=element_text(angle=90, size=16, vjust=0.5)) + \n    theme(axis.text.y=element_text(size=16, hjust=0.5)) +\n    geom_text(aes(x=Category, y=State, label=sum_sales), size=6) +\n    geom_tile(aes(x=Category, y=State, fill=kpi), alpha=0.50)\n  })\n# End Crosstab Tab ___________________________________________________________\n# Begin Barchart Tab ------------------------------------------------------------------\n  df2 <- eventReactive(input$click2, {\n    if(input$selectedRegions == 'All') region_list <- input$selectedRegions\n    else region_list <- append(list(\"Skip\" = \"Skip\"), input$selectedRegions)\n    if(online2() == \"SQL\") {\n      print(\"Getting from data.world\")\n      tdf = query(\n        data.world(propsfile = \"www/.data.world\"),\n        dataset=\"cannata/superstoreorders\", type=\"sql\",\n        query=\"select Category, Region, sum(Sales) sum_sales\n                from SuperStoreOrders\n                where ? = 'All' or Region in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n                group by Category, Region\",\n        queryParameters = region_list\n      ) # %>% View()\n    }\n    else {\n      print(\"Getting from csv\")\n      file_path = \"www/SuperStoreOrders.csv\"\n      df <- readr::read_csv(file_path)\n      tdf = df %>% dplyr::filter(Region %in% input$selectedRegions | input$selectedRegions == \"All\") %>%\n        dplyr::group_by(Category, Region) %>% \n        dplyr::summarize(sum_sales = sum(Sales)) # %>% View()\n    }\n    # The following two lines mimic what can be done with Analytic SQL. Analytic SQL does not currently work in data.world.\n    tdf2 = tdf %>% group_by(Category) %>% summarize(window_avg_sales = mean(sum_sales))\n    dplyr::inner_join(tdf, tdf2, by = \"Category\")\n    # Analytic SQL would look something like this:\n      # select Category, Region, sum_sales, avg(sum_sales) \n      # OVER (PARTITION BY Category ) as window_avg_sales\n      # from (select Category, Region, sum(Sales) sum_sales\n      #       from SuperStoreOrders\n      #      group by Category, Region)\n  })\n  output$data2 <- renderDataTable({DT::datatable(df2(), rownames = FALSE,\n                        extensions = list(Responsive = TRUE, FixedHeader = TRUE)\n  )\n  })\n  output$plot2 <- renderPlot({ggplot(df2(), aes(x=Region, y=sum_sales)) +\n      scale_y_continuous(labels = scales::comma) + # no scientific notation\n      theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + \n      theme(axis.text.y=element_text(size=12, hjust=0.5)) +\n      geom_bar(stat = \"identity\") + \n      facet_wrap(~Category, ncol=1) + \n      coord_flip() + \n      # Add sum_sales, and (sum_sales - window_avg_sales) label.\n      geom_text(mapping=aes(x=Region, y=sum_sales, label=round(sum_sales)),colour=\"black\", hjust=-.5) +\n      geom_text(mapping=aes(x=Region, y=sum_sales, label=round(sum_sales - window_avg_sales)),colour=\"blue\", hjust=-2) +\n      # Add reference line with a label.\n      geom_hline(aes(yintercept = round(window_avg_sales)), color=\"red\") +\n      geom_text(aes( -1, window_avg_sales, label = window_avg_sales, vjust = -.5, hjust = -.25), color=\"red\")\n  })\n  # End Barchart Tab ___________________________________________________________\n  \n})\n",
    "created" : 1492462357545.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3583875380",
    "id" : "B6A55F3F",
    "lastKnownWriteTime" : 1492118581,
    "last_content_update" : 1492118581,
    "path" : "~/Desktop/DataVisualization/09TableauExamples/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}